name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: ['*']
  pull_request_review_comment:
    types: [created, edited]

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read

      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: LLM AI Code Review
        uses: galihlprakoso/llm-ai-code-reviewer-action@v1.1.2
        with:
          ai_provider: 'GEMINI'
          ai_provider_model: 'gemini-1.5-pro'
          codebase_high_overview_descripton: |
            Kori is an enterprise email orchestration platform built with Go 1.22. The backend follows Clean Architecture principles and includes:

            Core Features:
            - JWT-based authentication with refresh tokens and RBAC
            - PostgreSQL database with GORM ORM
            - Redis for rate limiting and caching
            - SMTP configuration with multiple provider support
            - Echo framework for REST API with Swagger documentation
            - Containerized with Docker and managed via Docker Compose

            Key Modules:
            - Campaign Management: Email campaign creation and automation
            - Template Management: HTML email template system
            - Contact Management: Mailing lists and contact organization
            - Team Management: Multi-team support with role-based permissions
            - User Management: Role-based access with Super Admin, Admin, Member roles
            - API Key Management: Secure API access with granular permissions
            - Automation: Email workflow automation with custom triggers
            - Domain Management: Multi-domain support with DNS verification
            - Webhook System: Event-based integrations

            The codebase follows Go best practices with a clear project structure:
            - Clean separation of concerns (handlers, services, models)
            - Comprehensive test coverage
            - Swagger API documentation
            - Air for live reload during development
            - Make-based build system

            Please review for:
            - Code quality and Go best practices
            - Security considerations in auth flows
            - API design and REST principles
            - Database query optimization
            - Error handling patterns
            - Code readability and maintainability

          GITHUB_WORKSPACE: ${{ github.workspace }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}