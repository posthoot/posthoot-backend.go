name: 🐳 Build and Push Docker Image 🦀

on:
  push:
    branches:
      - sudo

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create a requirements.txt file
        run: |
          echo "names_generator" > requirements.txt
          echo "requests" >> requirements.txt

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate Dockerlike release name
        id: dockerlike-release-name
        run: |
          DOCKERLIKE_RELEASE_NAME=$(python -c "from names_generator import generate_name; print(generate_name())")
          echo "DOCKERLIKE_RELEASE_NAME=${DOCKERLIKE_RELEASE_NAME}" >> $GITHUB_ENV

      - name: Get latest version
        id: get_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest version tag
          LATEST_TAG=$(git tag --sort=-version:refname | head -n1 || echo "v0.0.1")
          # Increment patch version
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Get commits
        id: get_commits
        shell: sh
        run: |
          git fetch --tags
          LAST_TAG=$(git tag --sort=-version:refname | head -n1 || echo "v0.0.1")
          COMMITS=$(git log --oneline --no-merges --pretty=format:"%s" ${LAST_TAG}..HEAD)
          COMMITS=$(echo "$COMMITS" | tr '\n' ';')
          echo "ALL_COMMITS=$COMMITS" >> $GITHUB_ENV

      - name: Generate Release notes
        id: generate-release-notes
        shell: sh
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          DOCKERLIKE_RELEASE_NAME: ${{ env.DOCKERLIKE_RELEASE_NAME }}
          NEW_VERSION: ${{ env.NEW_VERSION }}
          COMMITS: ${{ env.ALL_COMMITS }}
        run: |
          echo "Generating release notes..."
          python3 scripts/generate-release-notes.py
          echo "Release notes generated"
      
      - name: Create a Release
        uses: softprops/action-gh-release@v2
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.DOCKERLIKE_RELEASE_NAME }}
          notes: ${{ env.COMMITS }}
          tag_name: ${{ env.NEW_VERSION }}
          body_path: release_notes.md

  build-and-push:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📝 Create build info
        shell: sh
        run: |
          echo "🏗️ Build Information\n\
          ------------------\n\
          🕒 Build Date: $(date)\n\
          🔄 Git Commit: $(git rev-parse HEAD)\n\
          🌿 Git Branch: $(git rev-parse --abbrev-ref HEAD)\n\
          📅 Build Timestamp: $(date)\n\
          🏷️ Version Hash: $(git rev-parse HEAD)" > ./public/build-info.txt

      - name: 🔑 Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0
        with:
          driver-opts: |
            network=host
          platforms: linux/amd64,linux/arm64

      - name: 🏷️ Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CACHEBUST=$(date +%s)
          network: host
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
