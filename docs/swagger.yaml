basePath: /api/v1
definitions:
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  handlers.ResetPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  handlers.VerifyResetCodeRequest:
    properties:
      code:
        type: string
      email:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - code
    - email
    - new_password
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API documentation for the Kori project.
  title: Kori API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - auth
  /auth/password-reset:
    post:
      consumes:
      - application/json
      description: Request a password reset code to be sent via email
      parameters:
      - description: Email for password reset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Reset code sent if email exists
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request password reset
      tags:
      - auth
  /auth/password-reset/verify:
    post:
      consumes:
      - application/json
      description: Verify password reset code and update password
      parameters:
      - description: Reset code verification and new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.VerifyResetCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid or expired reset code
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify reset code and set new password
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password and name details
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Validation error or email exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
swagger: "2.0"
